
# upper/lower bound:
1.set:-
auto it=upper_bound(mySet.begin(), mySet.end(), targetValue);
int IndexOfUpperBound=distance(mySet.begin(), it);

2.binary search
//vector
int lb=lower_bound(nums.begin(),nums.end(),target)-nums.begin();
int ub=upper_bound(nums.begin(),nums.end(),target)-nums.begin();
//array
int lb=lower_bound(nums,nums+n,target)-nums;
int ub=upper_bound(nums,nums+n,target)-nums;

# int to string:
string str=to_string(num);

# string to int:
int num=stoi(str);

# string to long long int:
long long int num=stoll(str);

# sort string in lexicographically:
sort(str.begin(),str.end());

$ sort string on the basis of length:
bool cmp(const string str1, const string str2) {
   return str1.length() < str2.length();
}
sort(str.begin(), str.end(), cmp);

# Remove elements from Vector:
v.pop_back()//remove last

v.erase(v.begin()+4);  //erase the 5th element 
v.erase(v.begin(),v.begin()+3); //erase first 3 elements 

v.clear() //all clear

# Min and Max element of a vector:
*max_element(nums.begin(),nums.end());
*min_element(nums.begin(),nums.end());

sum of vector:
int sum=accumulate(nums.begin(),nums.end(),0); // 0 is initial value.

 // Sort the entire 2D vector based on the first element of each row
    sort(myVector.begin(), myVector.end(), [](const auto& a, const auto& b) {
        return a[0] < b[0];
    });

#Unorderd_Sets to use pair we need to include pairhash:-
struct pair_hash {
    template <class T1, class T2>
    std::size_t operator () (const std::pair<T1, T2>& p) const {
        auto h1 = std::hash<T1>{}(p.first);
        auto h2 = std::hash<T2>{}(p.second);

        // Simple hash function combining two hash values
        return h1 ^ h2;  
    }
};
 unordered_set<pair<int,int>,pair_hash> st;
